import os
import logging
from typing import Optional, Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, User
from aiogram.fsm.context import FSMContext

from src.bot.core.config import GUARDIAN_LINK
from src.bot.services.media import generate_result_image
from src.bot.services.scoring import calculate_scores, determine_top_animal
from src.bot.keyboards.buttons import get_result_keyboard
from src.bot.services.data_loader import load_animals


def get_user_display_name(user: User) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: full_name ‚Üí username ‚Üí '–î—Ä—É–≥'.
    """
    if user.full_name:
        return user.full_name
    elif user.username:
        return user.username
    else:
        return "–î—Ä—É–≥"

router = Router()
logger = logging.getLogger("zoo_bot.handlers.result")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
ANIMALS_DATA = load_animals()

async def show_result(message: Message, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã:
    1) –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è,
    2) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ,
    3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º,
    4) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É,
    5) –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    data = await state.get_data()
    answers = data.get("selected_answers", [])

    # 1) –ü–æ–¥—Å—á—ë—Ç –æ—á–∫–æ–≤ –∑–∞ –æ—Ç–≤–µ—Ç—ã
    scores = calculate_scores(answers)
    top_animal = determine_top_animal(scores)

    if not top_animal:
        logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ—Ç–µ–º–Ω–æ–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()
        return

    animal_key, score = top_animal
    animal_info = ANIMALS_DATA.get(animal_key)

    if not animal_info:
        logger.error(f"–ñ–∏–≤–æ—Ç–Ω–æ–µ '{animal_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–æ—Ç–µ–º–∞.")
        await state.clear()
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ‚Äî —Ç–æ—Ç–µ–º: {animal_info['name']} ({score} –±–∞–ª–ª–æ–≤)")

    # 2) –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = None
    try:
        image_path = await generate_result_image(
            animal_image=animal_info["image"],
            animal_name=animal_info["name"],
            user_name=get_user_display_name(message.from_user)
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {animal_key}: {e}")

    # 3) –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    caption = (
        f"_{animal_info['description']}_\n\n"

        "üêæ  –¢—ã –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–ª —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. "
        "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –µ–º—É –Ω–∞—Å—Ç–æ—è—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"

        "üåø –í –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ, "
        "–∞ —Ç–æ–≥–æ, –∫—Ç–æ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É. –¢–æ–≥–æ, —á—å—è –∏—Å—Ç–æ—Ä–∏—è —Ç–µ–±—è —Ç—Ä–æ–Ω—É–ª–∞. –¢–æ–≥–æ, –∫–µ–º —Ç—ã –≤–æ—Å—Ö–∏—â–∞–µ—à—å—Å—è.\n\n"

        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º *–∏–º–µ–Ω–Ω–æ —Å–≤–æ–µ–≥–æ —Ç–æ—Ç–µ–º–Ω–æ–≥–æ* –∂–∏–≤–æ—Ç–Ω–æ–≥–æ,\n"
        "‚Ä¢ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∏–∑ 1100 –≤–∏–¥–æ–≤,\n"
        "‚Ä¢ –ø–æ–¥–∞—Ä–∏—Ç—å –æ–ø–µ–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"

        "ü´∂ –≠—Ç–æ —à–∞–Ω—Å –±—ã—Ç—å —á–∞—Å—Ç—å—é —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ.\n"
        "–ü–æ–º–æ–≥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –¥–∞–∂–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö –∑–∞—Ç—Ä–∞—Ç.\n\n"

        f"[üíö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏]({GUARDIAN_LINK})"
    )

    # 4) –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = get_result_keyboard(animal_key)

    # 5) –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–∫–∞—Ä—Ç–∏–Ω–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
    try:
        if image_path:
            from aiogram.types import FSInputFile
            photo = FSInputFile(image_path)
            await message.answer_photo(photo=photo, caption=caption, reply_markup=keyboard, parse_mode="Markdown")
        else:
            await message.answer(text=caption, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # 6) –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async def show_result_with_animal(message: Message, state: FSMContext, animal_key: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ animal_key.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (/test_result).
    """
    animal = ANIMALS_DATA.get(animal_key)

    if not animal:
        logger.error(f"Totem key '{animal_key}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ animals.json")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.")
        return

    logger.info(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ª—É—á–∏–ª –∂–∏–≤–æ—Ç–Ω–æ–µ '{animal['name']}'")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏
    try:
        image_path = await generate_result_image(
            animal_image=animal["image"],
            animal_name=animal["name"],
            user_name=get_user_display_name(message.from_user)
        )
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        image_path = None

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    # caption = (
    #     f"üéâ *–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal['name']}!*\n"
    #     f"_{animal['description']}_\n\n"
    #     f"[–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ]({animal['guardian_link']})"
    # )
    caption = (
        f"_{animal['description']}_\n\n"

        "üêæ  –¢—ã –ø—Ä–æ—à—ë–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∏ —É–∑–Ω–∞–ª —Å–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ. "
        "–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å—Ç–∞—Ç—å –µ–º—É –Ω–∞—Å—Ç–æ—è—â–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"

        "üåø –í –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –ø–æ–¥ –æ–ø–µ–∫—É –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞–∫–æ–µ-—Ç–æ –∂–∏–≤–æ—Ç–Ω–æ–µ, "
        "–∞ —Ç–æ–≥–æ, –∫—Ç–æ –±–ª–∏–∂–µ –ø–æ –¥—É—Ö—É. –¢–æ–≥–æ, —á—å—è –∏—Å—Ç–æ—Ä–∏—è —Ç–µ–±—è —Ç—Ä–æ–Ω—É–ª–∞. –¢–æ–≥–æ, –∫–µ–º —Ç—ã –≤–æ—Å—Ö–∏—â–∞–µ—à—å—Å—è.\n\n"

        "–¢—ã –º–æ–∂–µ—à—å:\n"
        "‚Ä¢ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º *–∏–º–µ–Ω–Ω–æ —Å–≤–æ–µ–≥–æ —Ç–æ—Ç–µ–º–Ω–æ–≥–æ* –∂–∏–≤–æ—Ç–Ω–æ–≥–æ,\n"
        "‚Ä¢ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∏–∑ 1100 –≤–∏–¥–æ–≤,\n"
        "‚Ä¢ –ø–æ–¥–∞—Ä–∏—Ç—å –æ–ø–µ–∫—É –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Ç –ª–∏—Ü–∞ –∫–æ–º–ø–∞–Ω–∏–∏.\n\n"

        "ü´∂ –≠—Ç–æ —à–∞–Ω—Å –±—ã—Ç—å —á–∞—Å—Ç—å—é —á–µ–≥–æ-—Ç–æ –±–æ–ª—å—à–µ–≥–æ.\n"
        "–ü–æ–º–æ–≥–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –¥–∞–∂–µ –±–µ–∑ –±–æ–ª—å—à–∏—Ö –∑–∞—Ç—Ä–∞—Ç.\n\n"

        f"[üíö –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏]({GUARDIAN_LINK})"
    )

    # –ö–Ω–æ–ø–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{animal_key}")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤", callback_data="feedback")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{animal_key}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if image_path:
        from aiogram.types import FSInputFile
        photo = FSInputFile(image_path)
        await message.answer_photo(photo=photo, caption=caption, parse_mode="Markdown", reply_markup=kb)
    else:
        await message.answer(caption, parse_mode="Markdown", reply_markup=kb)

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    await state.clear()