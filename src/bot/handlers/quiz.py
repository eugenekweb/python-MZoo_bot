import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from src.bot.states.quiz_states import QuizSession
from src.bot.services.data_loader import load_questions
from src.bot.keyboards.buttons import get_question_keyboard

router = Router()
logger = logging.getLogger("zoo_bot.handlers.quiz")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ JSON-—Ñ–∞–π–ª–∞
QUESTIONS = load_questions()
TOTAL_QUESTIONS = len(QUESTIONS)

logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {TOTAL_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã")


@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´üêæ –ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É¬ª.
    –û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.
    """
    await state.clear()
    await state.update_data(current_index=0, selected_answers=[])
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É")
    await ask_question(callback.message, 0, state)
    await callback.answer()


async def ask_question(message: Message, index: int, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É.
    –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.
    """
    if index >= TOTAL_QUESTIONS:
        logger.info(f"–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        from src.bot.handlers.result import show_result
        await show_result(message, state)
        return

    question = QUESTIONS[index]
    keyboard = get_question_keyboard(index, question["answers"])

    await message.answer(
        f"‚ùì –í–æ–ø—Ä–æ—Å {index + 1}/{TOTAL_QUESTIONS}:\n"
        f"{question['question']}",
        reply_markup=keyboard
    )
    await state.set_state(QuizSession.question_index)


@router.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.
    """
    data = await state.get_data()
    current_index = data.get("current_index", 0)
    selected_answers = data.get("selected_answers", [])

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    _, q_idx_str, a_idx_str = callback.data.split("_")
    q_idx, a_idx = int(q_idx_str), int(a_idx_str)

    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    answer_weights = QUESTIONS[q_idx]["answers"][a_idx]["weights"]
    selected_answers.append(answer_weights)

    await state.update_data(current_index=current_index + 1, selected_answers=selected_answers)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback.message.edit_reply_markup(reply_markup=None)
    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –æ—Ç–≤–µ—Ç {a_idx} –Ω–∞ –≤–æ–ø—Ä–æ—Å {q_idx}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_question(callback.message, current_index + 1, state)
    await callback.answer()